#include <string.h>
#include "getopt.h"
#include <iostream>
#include <cmath>
#include <ctype.h>



using namespace std;

typedef struct {
int geom;
int num;
int increments; //number of times ADC will be computed during a simulation
double de;
double di;
double ds;
double dc;
double rs;
double rc;
double T2e;
double T2i;
double T2s;
double T2c;
double gt;
double gs;
double r;
int numoft;
double csx;
double csy;
double csz;
double p ;
double dt;
double ls;
double g;
int dim;
double hex_sidelength;
bool printparticleinfo;
bool printparticleposition;
bool printsignalinfo;
bool printinitialvars;
bool printtofile;
bool gaussian;
bool use_T2;
int graddir;
FILE* fh;
FILE* fh_g;
FILE* fh_pp;
FILE* fh_incorrectlinreg_ADCx;
FILE* fh_incorrectlinreg_FA;
FILE* fh_incorrectlinreg_ADCz;
int dtg; //diffusethroughgradient = true or false
               } VARIABLES;


VARIABLES commandline_input(int argc, char *argv[])
{

VARIABLES vars;

//default variables
vars.de = 2.5*pow(10.0,-6.0);
vars.di = 1.0*pow(10.0,-6.0);
vars.ds = 1.5*vars.di;
vars.dc = vars.di;
vars.rs = 0;
vars.rc = 0;
vars.T2e = 200;
vars.T2i = 200;
vars.T2s = vars.T2i*1.5;
vars.T2c = vars.T2i;
vars.gt = .001;
vars.gs = 5;
vars.numoft = 10;
vars.csx = 0.0026833;
vars.csy = 0.0026833;
vars.csz = 0.003;
vars.p = .005;
vars.dt = .1;
vars.ls = .003;
vars.g = 0.0001609114;
vars.hex_sidelength = .5;
vars.printparticleinfo = false;
vars.printparticleposition = false;
vars.printsignalinfo = false;
vars.printinitialvars = false;
vars.printtofile = false;
vars.gaussian = false;
vars.dtg = 0;
vars.graddir = 0;
vars.increments = 1;
vars.r= 0;
vars.use_T2 = true;

const char * optv = "a:b:cdefghijklmnopqrstuvwxy";

static const struct option longOpts[] = {
    { "geom", required_argument, NULL, 'a' },
    { "num", required_argument, NULL, 'b' },
    { "de", required_argument, NULL, 'c' },
    { "di", required_argument, NULL, 'd' },
    { "ds", required_argument, NULL, 'e' },
    { "dc", required_argument, NULL, 'f' },
    { "rs", required_argument, NULL, 'g' },
    { "rc", required_argument, NULL, 'h' },
    { "T2e", required_argument, NULL, 'i' },
    { "T2i", required_argument, NULL, 'j' },
    { "T2s", required_argument, NULL, 'k' },
    { "T2c", required_argument, NULL, 'l' },
    { "gt", required_argument, NULL, 'm' },
    { "gs", required_argument, NULL, 'n' },
    { "numoft", required_argument, NULL, 'o' },
    { "csx", required_argument, NULL, 'p' },
    { "csy", required_argument, NULL, 'q' },
    { "csz", required_argument, NULL, 'r' },
    { "perm", required_argument, NULL, 's' },
    { "dt", required_argument, NULL, 't' },
    { "ls", required_argument, NULL, 'u' },
    { "grad", required_argument, NULL, 'v' },
    { "hex", required_argument, NULL, 'w' },
    { "printparticleinfo",no_argument, NULL, 0},
    { "dtg",required_argument,NULL,1},
    { "printsignalinfo",no_argument, NULL, 2},
    { "printinitialvars",no_argument, NULL, 3},
    { "printtofile",required_argument, NULL, 4},
	{ "graddir",required_argument, NULL, 5},
	{ "gaussian",required_argument,NULL, 6},
	{ "increments",required_argument,NULL, 7},
	{ "radius",required_argument,NULL, 8},
	{ "printparticleposition",required_argument,NULL, 9},
	{ "incorrectlinear_ADCx",required_argument,NULL, 10},
	{ "dontuseT2",no_argument,NULL, 11},
	{ "incorrectlinear_ADCz",required_argument,NULL, 12},
    { "incorrectlinear_FA",required_argument,NULL, 13},
	
};



if (argc == 1){
cout << "Monte Carlo Simulation of Diffusion with restricting geometries" << endl << endl;
cout << "Usage: test [options] -geom <geometry packing> -num <number of particles> " << endl;
cout << "       test -geom <geometry packing> -num <number of particles> [options] " << endl << endl << endl;
cout << "Available Options are: " << endl << endl;
cout << "       -geom <geometry packing>                         (0 = Szafer Box Lattice, 1 = Cylinder Box Lattice, no default)" << endl;
cout << "       -num  <number of particles>                      (no default)" << endl;
cout << "       -de <Extracellular Diffusion Coefficient>        (geometry 0,1 default = 2.5e-6 mm^2/ms)" << endl;
cout << "       -di <Intracellular Diffusion Coefficient>        (geometry 0 default = 1.0e-6 mm^2/ms)"<< endl;
cout << "       -T2e <Extracellular T2>                          (geometry 0,1 default = 200 ms)" << endl;
cout << "       -T2i <Intracellular T2>                          (geometry 0 default = 70 ms)"<< endl;   
cout << "       -radius <Cell Cylinder Radius>                   (geometry 1 default = 0 mm)"<< endl;                         
cout << "       -gt <gradient time>                              (geometry 0,1 default = 1 ms)" << endl;
cout << "       -gs <gradient spacing>                           (if dtg = 0, this is the diffusion time. geometry 0,1 default = 10 ms)" << endl;
cout << "       -csx <Cell Size in x dimension>                  (geometry 0 default = 0)" << endl;
cout << "       -csy <Cell Size in y dimension>                  (geometry 0 default = 0)" << endl;
cout << "       -csz <Cell Size in z dimension>                  (geometry 0 default = 0)" << endl;
cout << "       -perm <permeability>                             (geometry 0,1 default =  .005)" << endl;
cout << "       -dt <timestep>                                   (geometry 0,1 default =  .1 ms)" << endl;
cout << "       -ls <lattice size>                               (geometry 0,1 default = 1 mm) "<< endl;
cout << "       -grad <initial gradient strength>                (geometry 0,1 default = 0.0001609114 T/mm)" << endl;
cout << "       -help                                            (not available atm)                            " << endl;       
cout << "       -dim <dimension>                                 (default = 3, no other dimensions are supported at this time)" << endl;
cout << "       -printparticleinfo                               (default = false)" << endl;
cout << "       -printsignalinfo                                 (default = false)" << endl;
cout << "       -dtg <diffusethroughgradient>                    (default = 0(NO), otherwise 1(YES))" << endl;
cout << "       -printinitialvars                                (default = false)" << endl;
cout << "       -printtofile <text file>                         (default = false, prints (timestep, ADC) for graddir to text file)" << endl;
cout << "       -graddir <gradient direction>                    (default = 0(x axes), 1(y axes), 2(z axes)" << endl;
cout << "       -gaussian <text file>                            (default = false) " << endl;
cout << "       -increments <number of times ADC is computed>    (default = 1) " << endl;
cout << "       -hex <hexagonal sidelength>                      (default = .5) " << endl;
cout << "       -dontuseT2                                       (default = true) " << endl;

exit (1);
}


else {

    int  errors = 0, count = 0;
    int optchar, longindex;

    while((optchar = getopt_long_only(argc, argv, optv,longOpts,&longindex)) != -1) {

      switch (optchar) {
		
        case 'a' :
       if (optarg == NULL)  ++errors;
       else  vars.geom = (int)atol(optarg); count++;

          break;
        case 'b' :
       if (optarg == NULL)  ++errors;
        else  vars.num = (int)atol(optarg); count++;
          break;
        case 'c' :
        if (optarg != NULL)  vars.de = atof(optarg);
          break;
        case 'd' :
        if (optarg != NULL)  vars.di = atof(optarg);
          break;
        case 'e' :
        if (optarg != NULL)  vars.ds = atof(optarg);
          break;
        case 'f' :
        if (optarg != NULL)  vars.dc = atof(optarg);
          break;
        case 'g' :
        if (optarg != NULL)  vars.rs = atof(optarg);
         break;
        case 'h' :
        if (optarg != NULL)  vars.rc = atof(optarg);
          break;
        case 'i' :
        if (optarg != NULL)  vars.T2e = atof(optarg);
        break;
        case 'j' :
        if (optarg != NULL)  vars.T2i = atof(optarg);
          break;
        case 'k' :
        if (optarg != NULL)  vars.T2s = atof(optarg);
          break;
        case 'l' :
        if (optarg != NULL)  vars.T2c = atof(optarg);
          break;
	case 'm' :
        if (optarg != NULL)  vars.gt = atof(optarg);
          break;
        case 'n' :
        if (optarg != NULL)  vars.gs = atof(optarg);
          break;
        case 'o' :
        if (optarg != NULL)  vars.numoft = (int)atol(optarg);
          break;
        case 'p' :
        if (optarg != NULL)  vars.csx = atof(optarg);
          break;
	case 'q' :
        if (optarg != NULL)  vars.csy = atof(optarg);
          break;
        case 'r' :
        if (optarg != NULL)  vars.csz = atof(optarg);
          break;

        case 's' :
        if (optarg != NULL)  vars.p = atof(optarg);
          break;

        case 't' :
        if (optarg != NULL)  vars.dt = atof(optarg);
          break;

        case 'u' :
        if (optarg != NULL)  vars.ls = atof(optarg);
          break;

        case 'v' :
        if (optarg != NULL)  vars.g = atof(optarg);
          break;
	case 'w' :
        if (optarg != NULL)  vars.hex_sidelength = atof(optarg);
          break;
   	case 0 :
	vars.printparticleinfo = true;
	break;
	case 1 :
	if (atol(optarg) == 0 || atol(optarg) == 1)vars.dtg = (int)atol(optarg); 
	break;
	case 2 :
	vars.printsignalinfo = true; 
	break;
	case 3 :
	vars.printinitialvars = true; 
	break;
	case 4 :
	vars.printtofile = true;
	vars.fh = fopen(optarg,"w"); 
	break;
	case 5:
    if (optarg != NULL)  vars.graddir = (int)atol(optarg);
    break;
	case 6:
	vars.gaussian = true;
	vars.fh_g = fopen(optarg,"w"); 
	break;
	case 7:
	if (optarg != NULL)  vars.increments = (int)atol(optarg);
	break;
	case 8:
	if (optarg != NULL)  vars.r = atof(optarg);
	break;
	case 9 :
	vars.printparticleposition = true;
	vars.fh_pp = fopen(optarg,"w"); 
	break;
	case 10 :
	vars.fh_incorrectlinreg_ADCx = fopen(optarg,"w"); 
	break;
	case 11 :
	vars.use_T2 = false; 
	break;
	case 12:
	vars.fh_incorrectlinreg_ADCz = fopen(optarg,"w"); 
	break;
	case 13:
	vars.fh_incorrectlinreg_FA = fopen(optarg,"w"); 
	break;
        case '?':
             if (isprint (optopt))
               fprintf (stderr, "Unknown option `-%c'.\n", optopt);
             else
               fprintf (stderr,
                        "Unknown option character `\\x%x'.\n",
                        optopt);
			exit(1);

           }

    }
	if(count != 2){cout << "ERROR: both -geom and -num parameters are required" << endl; exit(1);}
}


return vars;

}


void printinitvariables(VARIABLES vars)
{
cout << endl << "INITIAL VARIABLES" << endl;
cout <<           "-----------------" << endl;
cout << "Dextra " << vars.de << endl;
cout << "Dintra" << vars.di << endl;
cout << "Dsheath " << vars.ds << endl;
cout << "Dcore " << vars.dc << endl;
cout << "Rsheath " << vars.rs << endl;
cout << "Rcore " << vars.rc << endl;
cout << "T2extra " << vars.T2e << endl;
cout << "T2intra " << vars.T2i << endl;
cout << "T2sheath " << vars.T2s << endl;
cout << "T2core " << vars.T2c << endl;
cout << "Gradient time " << vars.gt << endl;
cout << "Gradient Spacing " << vars.gs << endl;
cout << "Number of Trials " << vars.numoft << endl;
cout << "Csx " << vars.csx << endl;
cout << "Csy " << vars.csy << endl;
cout << "Csz " << vars.csz << endl;
cout << "Permeability " << vars.p << endl;
cout << "Timestep " << vars.dt << endl;
cout << "Lattice Size " << vars.ls << endl;
cout << "Gradient " << vars.g << endl;
cout << "Hexagonal Sidelength " << vars.hex_sidelength << endl;
cout << "Print particle info " << vars.printparticleinfo << endl;
cout << "Diffuse Through Gradient " << vars.dtg << endl;
}
