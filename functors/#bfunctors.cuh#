//Quadropolar Saddle Coil
class QSC_GRE{
	
public:
  real B0;
  real G;
  real gradientDuration;
  real gradientSpacing;
	
public:
  __device__ __host__ QSC_GRE(){
    B0 = 0.0;
    G = 0.0;
    gradientDuration = 0.0;
    gradientSpacing = 0.0;
  }
	
	
  __device__ __host__ QSC_GRE(real _B0, real _G, real _gradientDuration, real _gradientSpacing){
    B0 = _B0;
    G = _G;
    gradientDuration = _gradientDuration;
    gradientSpacing = _gradientSpacing;
  }


  __device__ __host__ Vector3 operator() (Vector3 r, real time) const {
	
    if ( time < gradientDuration) {
      return Vector3(0.0, G*r.z, B0 + G*r.y);
    }
		
    else if ( time >= gradientSpacing + gradientDuration && time < 2.0*gradientDuration + gradientSpacing) {
      return Vector3(0.0, -G*r.z, B0 - G*r.y);
    }
		
    else {
      return Vector3(0.0, 0.0, B0);
    }
	
  }


};

class SIN_GRE{
	
public:
  real B0;
  Vector3 G;
  real gradientDuration;
  real gradientSpacing;
  real period;
	
public:
  __device__ __host__ SIN_GRE(){
    B0 = 0.0;
    G = Vector3(0.0,0.0,0.0);
    gradientDuration = 0.0;
    gradientSpacing = 0.0;
    period = 0.0;
  }
	
	
  __device__ __host__ SIN_GRE(real _B0, Vector3 _G, real _gradientDuration, real _gradientSpacing, real _period){
    B0 = _B0;
    G = _G;
    gradientDuration = _gradientDuration;
    gradientSpacing = _gradientSpacing;
    period = _period;
  }


  __device__ __host__ Vector3 operator() (Vector3 r, real time) const {
	
    if ( time < gradientDuration) {
      return Vector3(0.0, 0.0, B0 + G*r*sin(2.0*PI*time/period));
    }
		
    else if ( time >= gradientSpacing + gradientDuration && time < 2.0*gradientDuration + gradientSpacing) {
      return Vector3(0.0, 0.0, B0 - G*r*sin(2.0*PI*(time - gradientSpacing - gradientDuration )/period) );
    }
		
    else {
      return Vector3(0.0, 0.0, B0);
    }
	
  }
	
};


class COS_GRE{
	
public:
  real B0;
  Vector3 G;
  real gradientDuration;
  real gradientSpacing;
  real period;
  real b;
	
public:
  __device__ __host__ COS_GRE(){
    B0 = 0.0;
    G = Vector3(0.0,0.0,0.0);
    gradientDuration = 0.0;
    gradientSpacing = 0.0;
    period = 0.0;
  }
	
	
  __device__ __host__ COS_GRE(real _B0, Vector3 _G, real _gradientDuration, real _gradientSpacing, int _numOfPeriods){
    B0 = _B0;
    G = _G;
    gradientDuration = _gradientDuration;
    gradientSpacing = _gradientSpacing;
    period = gradientDuration/((real)_numOfPeriods);
    b = GAMMA*GAMMA*(1.0/4.0)*G.magnitude()*G.magnitude()*gradientDuration*gradientDuration*gradientDuration/(PI*PI*_numOfPeriods*_numOfPeriods);

  }
  
  __device__ __host__ COS_GRE(real _B0, real _G, Vector3 G_hat, real _gradientDuration, real _gradientSpacing, int _numOfPeriods){
    B0 = _B0;
    G = G_hat*_G;
    gradientDuration = _gradientDuration;
    gradientSpacing = _gradientSpacing;
    period = gradientDuration/((real)_numOfPeriods);
    b = GAMMA*GAMMA*(1.0/4.0)*_G*_G*gradientDuration*gradientDuration*gradientDuration/(PI*PI*_numOfPeriods*_numOfPeriods);

  }
  
  __device__ __host__ real getB(){
  
    return b;
	
  }

  __device__ __host__ real getFreq(){return 1.0/period;}

  __device__ __host__ Vector3 operator() (Vector3 r, real time) const {
	
    if ( time < gradientDuration) {
      return Vector3(0.0, 0.0, B0 + G*r*cos(2.0*PI*time/period));
    }
		
    else if ( time >= gradientSpacing + gradientDuration && time < 2.0*gradientDuration + gradientSpacing) {
      return Vector3(0.0, 0.0, B0 - G*r*cos(2.0*PI*(time - gradientSpacing - gradientDuration )/period) );
    }
		
    else {
      return Vector3(0.0, 0.0, B0);
    }
	
  }
	
};





class RECT_GRE{
	
public:
  real B0;
  Vector3 G;
  real gradientDuration;
  real gradientSpacing;
	
public:
  __device__ __host__ RECT_GRE(){
    B0 = 0.0;
    G = Vector3(0.0,0.0,0.0);
    gradientDuration = 0.0;
    gradientSpacing = 0.0;
  }
	
	
  __device__ __host__ RECT_GRE(real _B0, Vector3 _G, real _gradientDuration, real _gradientSpacing){
    B0 = _B0;
    G = _G;
    gradientDuration = _gradientDuration;
    gradientSpacing = _gradientSpacing;
  }


  __device__ __host__ Vector3 operator() (Vector3 r, real time) const {
	
    if ( time < gradientDuration) {
		
      return Vector3(0.0, 0.0, B0 + G*r);
    }
		
    else if ( time >= gradientSpacing + gradientDuration && time < 2.0*gradientDuration + gradientSpacing) {
		
      return Vector3(0.0, 0.0, B0 - G*r);
		
    }
		
    else {
		
      return Vector3(0.0, 0.0, B0);
    }
	
  }
	
};



