//We assume no holes -> a closed surface DamagedAxon

class DamagedAxon {

private:

	Cylinder_XY cyl;
	Sphere spher;
	
public:

  __device__ __host__ DamagedAxon(){}
  __device__ __host__ DamagedAxon(Vector3 _center, real _radiusCyl, real _radiusSphere, real _T1, real _T2, real _D, real _permeability, int _region){
	cyl = Cylinder_XY(_center.x, _center.y, _radiusCyl, _T2, _T1, _D, _region, _permeability);
	spher = Sphere(_center.x, _center.y, _center.z, _radiusSphere, _T2, _T1, _D, _region, _permeability);
  }	
  __device__ __host__ ~DamagedAxon(){};

	
  __device__ __host__ bool inside(const Vector3 & r) const{
	return ( cyl.inside(r) || spher.inside(r) );
  }
		
  __device__ __host__ bool intersect(const Vector3 & ri, const Vector3 & rf, real & v, Vector3 & n) const{
	
	//inside both the sphere and the cylinder
	if ( spher.inside(ri) && cyl.inside(ri) ){
		return false;
	}
	
	//inside just the sphere
	else if (spher.inside(ri)){
		return spher.intersect(ri,rf,v,n);
	}
	
	//inside just the cylinder
	else if (cyl.inside(ri)){
		return cyl.intersect(ri,rf,v,n);
	}
	
	else{
		double v1;
		double v2;
		Vector3 n1;
		Vector3 n2;
		bool s1 = spher.intersect(ri,rf,v1,n1);
		bool s2 = cyl.intersect(ri,rf,v2,n2);
		bool s3 = v1 < v2;
		
		if ( (s1 && s2 && s3) || (s1 && !s2)){
		  v = v1;
		  n = n1;
		  return true;
		}
			
		else if ((s1 && s2 && !s3) || (s2 && !s1)){
		  v = v2;
		  n = n2;
		  return true;
		}
			
		else {
		  return false;
		}	
	}
	
  }
		
  __device__ __host__ int getRegion(const Vector3 & r) const{
    return region;
  }
		
  __device__ __host__  real getT2(const Vector3 & r) const{
	if (inside(r)){
		return T2;
	}
	return -1.0;
  }
		
  __device__ __host__ real getD(const Vector3 & r) const{
	if (inside(r)){
		return D;
	}
	return -1.0;
  }
  
   __device__ __host__ real getPermeability() const{
		return permeability;
  }

};
